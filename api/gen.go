// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	APIKeyAuthScopes = "APIKeyAuth.Scopes"
	CookieAuthScopes = "CookieAuth.Scopes"
)

// Defines values for GetCoveragePathParamsFormat.
const (
	Raw GetCoveragePathParamsFormat = "raw"
	Svg GetCoveragePathParamsFormat = "svg"
)

// APIKey defines model for APIKey.
type APIKey struct {
	Id  int    `json:"id"`
	Key string `json:"key"`
}

// APIKeyInit defines model for APIKeyInit.
type APIKeyInit struct {
	Scopes []string `json:"scopes"`
}

// APIKeyUpdate defines model for APIKeyUpdate.
type APIKeyUpdate struct {
	Id     int      `json:"id"`
	Scopes []string `json:"scopes"`
}

// ExpectedError defines model for ExpectedError.
type ExpectedError struct {
	// Code the error code of the responses
	Code int `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// HealthCheck Information on the health of the service
type HealthCheck = string

// SigninData Data used to sign in
type SigninData struct {
	// Password Password used to sign in
	Password string `json:"password"`

	// Username Username used to sign in
	Username string `json:"username"`
}

// Success Operation was a success
type Success struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// APIKeyResponse defines model for APIKeyResponse.
type APIKeyResponse = APIKey

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = ExpectedError

// HealthCheckResponse Information on the health of the service
type HealthCheckResponse = HealthCheck

// SuccessResponse Operation was a success
type SuccessResponse = Success

// SuccessfulSigninResponse Operation was a success
type SuccessfulSigninResponse = Success

// SuccessfulSignoutResponse Operation was a success
type SuccessfulSignoutResponse = Success

// APIKeyInitBody defines model for APIKeyInitBody.
type APIKeyInitBody = APIKeyInit

// APIKeyUpdateBody defines model for APIKeyUpdateBody.
type APIKeyUpdateBody = APIKeyUpdate

// SigninDataBody Data used to sign in
type SigninDataBody = SigninData

// GetCoveragePathParams defines parameters for GetCoveragePath.
type GetCoveragePathParams struct {
	// Format Specifies the desired format
	Format *GetCoveragePathParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetCoveragePathParamsFormat defines parameters for GetCoveragePath.
type GetCoveragePathParamsFormat string

// PostCoveragePathJSONBody defines parameters for PostCoveragePath.
type PostCoveragePathJSONBody struct {
	Cover string `json:"cover"`
}

// DeleteKeysParams defines parameters for DeleteKeys.
type DeleteKeysParams struct {
	Id int `form:"id" json:"id"`
}

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	Id int `form:"id" json:"id"`
}

// PostCoveragePathJSONRequestBody defines body for PostCoveragePath for application/json ContentType.
type PostCoveragePathJSONRequestBody PostCoveragePathJSONBody

// PostKeysJSONRequestBody defines body for PostKeys for application/json ContentType.
type PostKeysJSONRequestBody = APIKeyInit

// PutKeysJSONRequestBody defines body for PutKeys for application/json ContentType.
type PutKeysJSONRequestBody = APIKeyUpdate

// PostUsersSigninJSONRequestBody defines body for PostUsersSignin for application/json ContentType.
type PostUsersSigninJSONRequestBody = SigninData

// PostUsersSignupJSONRequestBody defines body for PostUsersSignup for application/json ContentType.
type PostUsersSignupJSONRequestBody = SigninData

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /coverage/{path})
	DeleteCoveragePath(w http.ResponseWriter, r *http.Request, path string)

	// (GET /coverage/{path})
	GetCoveragePath(w http.ResponseWriter, r *http.Request, path string, params GetCoveragePathParams)

	// (POST /coverage/{path})
	PostCoveragePath(w http.ResponseWriter, r *http.Request, path string)

	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)

	// (DELETE /keys)
	DeleteKeys(w http.ResponseWriter, r *http.Request, params DeleteKeysParams)

	// (GET /keys)
	GetKeys(w http.ResponseWriter, r *http.Request, params GetKeysParams)

	// (POST /keys)
	PostKeys(w http.ResponseWriter, r *http.Request)

	// (PUT /keys)
	PutKeys(w http.ResponseWriter, r *http.Request)

	// (POST /users/signin)
	PostUsersSignin(w http.ResponseWriter, r *http.Request)

	// (POST /users/signout)
	PostUsersSignout(w http.ResponseWriter, r *http.Request)

	// (POST /users/signup)
	PostUsersSignup(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (DELETE /coverage/{path})
func (_ Unimplemented) DeleteCoveragePath(w http.ResponseWriter, r *http.Request, path string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /coverage/{path})
func (_ Unimplemented) GetCoveragePath(w http.ResponseWriter, r *http.Request, path string, params GetCoveragePathParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /coverage/{path})
func (_ Unimplemented) PostCoveragePath(w http.ResponseWriter, r *http.Request, path string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /keys)
func (_ Unimplemented) DeleteKeys(w http.ResponseWriter, r *http.Request, params DeleteKeysParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /keys)
func (_ Unimplemented) GetKeys(w http.ResponseWriter, r *http.Request, params GetKeysParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /keys)
func (_ Unimplemented) PostKeys(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /keys)
func (_ Unimplemented) PutKeys(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /users/signin)
func (_ Unimplemented) PostUsersSignin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /users/signout)
func (_ Unimplemented) PostUsersSignout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /users/signup)
func (_ Unimplemented) PostUsersSignup(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteCoveragePath operation middleware
func (siw *ServerInterfaceWrapper) DeleteCoveragePath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithOptions("simple", "path", chi.URLParam(r, "path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCoveragePath(w, r, path)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCoveragePath operation middleware
func (siw *ServerInterfaceWrapper) GetCoveragePath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithOptions("simple", "path", chi.URLParam(r, "path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoveragePathParams

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoveragePath(w, r, path, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCoveragePath operation middleware
func (siw *ServerInterfaceWrapper) PostCoveragePath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithOptions("simple", "path", chi.URLParam(r, "path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCoveragePath(w, r, path)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteKeys operation middleware
func (siw *ServerInterfaceWrapper) DeleteKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteKeysParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteKeys(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeysParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeys(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostKeys operation middleware
func (siw *ServerInterfaceWrapper) PostKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostKeys(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutKeys operation middleware
func (siw *ServerInterfaceWrapper) PutKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutKeys(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersSignin operation middleware
func (siw *ServerInterfaceWrapper) PostUsersSignin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersSignin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersSignout operation middleware
func (siw *ServerInterfaceWrapper) PostUsersSignout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersSignout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersSignup operation middleware
func (siw *ServerInterfaceWrapper) PostUsersSignup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersSignup(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/coverage/{path}", wrapper.DeleteCoveragePath)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/coverage/{path}", wrapper.GetCoveragePath)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/coverage/{path}", wrapper.PostCoveragePath)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/keys", wrapper.DeleteKeys)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/keys", wrapper.GetKeys)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/keys", wrapper.PostKeys)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/keys", wrapper.PutKeys)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/signin", wrapper.PostUsersSignin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/signout", wrapper.PostUsersSignout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/signup", wrapper.PostUsersSignup)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
