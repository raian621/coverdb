// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetCoveragePathParamsFormat.
const (
	Raw GetCoveragePathParamsFormat = "raw"
	Svg GetCoveragePathParamsFormat = "svg"
)

// ExpectedError defines model for ExpectedError.
type ExpectedError struct {
	// Code the error code of the responses
	Code int `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// HealthCheck Information on the health of the service
type HealthCheck = string

// SigninData Data used to sign in
type SigninData struct {
	// Password Password used to sign in
	Password string `json:"password"`

	// Username Username used to sign in
	Username string `json:"username"`
}

// Success Operation was a success
type Success struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = ExpectedError

// HealthCheckResponse Information on the health of the service
type HealthCheckResponse = HealthCheck

// SuccessResponse Operation was a success
type SuccessResponse = Success

// SigninDataBody Data used to sign in
type SigninDataBody = SigninData

// GetCoveragePathParams defines parameters for GetCoveragePath.
type GetCoveragePathParams struct {
	// Format Specifies the desired format
	Format *GetCoveragePathParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetCoveragePathParamsFormat defines parameters for GetCoveragePath.
type GetCoveragePathParamsFormat string

// PostSigninJSONRequestBody defines body for PostSignin for application/json ContentType.
type PostSigninJSONRequestBody = SigninData

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /coverage/{path})
	GetCoveragePath(w http.ResponseWriter, r *http.Request, path string, params GetCoveragePathParams)

	// (POST /coverage/{path})
	PostCoveragePath(w http.ResponseWriter, r *http.Request, path string)

	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)

	// (POST /signin)
	PostSignin(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /coverage/{path})
func (_ Unimplemented) GetCoveragePath(w http.ResponseWriter, r *http.Request, path string, params GetCoveragePathParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /coverage/{path})
func (_ Unimplemented) PostCoveragePath(w http.ResponseWriter, r *http.Request, path string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /signin)
func (_ Unimplemented) PostSignin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCoveragePath operation middleware
func (siw *ServerInterfaceWrapper) GetCoveragePath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithOptions("simple", "path", chi.URLParam(r, "path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoveragePathParams

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoveragePath(w, r, path, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCoveragePath operation middleware
func (siw *ServerInterfaceWrapper) PostCoveragePath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithOptions("simple", "path", chi.URLParam(r, "path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCoveragePath(w, r, path)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSignin operation middleware
func (siw *ServerInterfaceWrapper) PostSignin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSignin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/coverage/{path}", wrapper.GetCoveragePath)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/coverage/{path}", wrapper.PostCoveragePath)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/signin", wrapper.PostSignin)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTW/jNhD9K8S0twqRkg2KQrdNdrFdoECDDdrLNgdGGkvctUguOXJiBP7vxZCUJVty",
	"gga5NJfY/Jj3ZubNDP0Elems0ajJQ/kEDn/06OnK1ArDwq1qtNIfJMkrU295pTKaUBN/lNauVSVJGZ1/",
	"80bzmq9a7CR/+tnhCkr4KR8h8rjr89Es7PgvA4feGu0j6pWsG/ySVo5AVScbzP2m+eWxWx8i0tYilODJ",
	"Kd1AMFujr5yyTBFKeC8qU6OozAadbFDcM464/fsT7DL46JxxJ0Bf7+nHR4sVYR2sL3EKG6JD72WDzON3",
	"lGtqr1usvr85m4ntJS5xW1S8L+qQnQxu+6pC79+cS7K7xCNtrfq1MBZdsC5k9V2bhzXWDXYMzteSLYY6",
	"DHT5BNbxXUpC5sTz/0MgalFgSEAQhlkJXhm1mAE+ys6uEcrL4jIbFKY0YYOOozMkbmb6MK8TQwHUOvMN",
	"KxL/9EXxrtKyw/AJRW3QC21I4KPyBNlM1FkoUuWwhvJrdGtkcbc/b+7Z/pGe5iw/65VxXQyw0cH7Noog",
	"xcKj26jq0IHGmHrOLJs0izkQr4reYy3ICK8aLZSG7ChJVnr/YFw9v36TdhZMjLz21zPolP4DdUMtlL8t",
	"MO09Og76HOivtPMskNtKXujk4wByXhQvpWqPmY1El/I11MWM2p/7UniQXkjh08HshNT3fC8m5JalO7pm",
	"ToI8790o9AA/d4wvKL0yoVErCmDX3Ig/XIn3N5/FrcUKMtig89Hd4qw4K5insailVVDCu7DE8aM2uJoP",
	"rTx/4rUdrzVI89h9Qeqd9kHSSzPArIQcihKyMQqfayjhE9J1On4jqQ0EnOyQ0Hkovx5jsSdqpTCi1eg5",
	"RiLW2YGM/KYBDgqU8KNHt4UMoihhf3hspTWuZL+m/TXUfceBj9+cfJjEfMzRvI6oZVVPe9AQisMaV9T2",
	"92eV6XInldS/XpzHYNf3A2cbY5Eop2+jJsj1mD0zne+Ohv5FUZwaGftz+eHLYJfBZXH58q3D0c5KJNlw",
	"6mDIK9ztMrDGL0jnFmlJNzweOanTUM6Uc2P8f5LO/z09R4HO4KI4f8Wtt0vqLoM8DrQXW0Oae2oyEVfO",
	"dCEX0tqlrhBHK7wmUkuvvKkPyXT0wIfBGibkskTjjBK9V7rhyeVE5bBGTUqu/aIq46xOiohP/u1p1pNf",
	"BfnRT4Lda7w/flNOPecJ7Nlxft+h2wyV0rs1lNASWV/m+VNtOqn0LpdW5ZtznhzSKXm/jizi7mHfTPVx",
	"FpN5/BBUXqjUscNdQa0ksTW9E8OYUtqT1BXyQY8kyPBYu9tTP07LNTeM67F8UynuV+btOeghvrtIUu/n",
	"r7BkI8ljd7f7NwAA//9hewAYww0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
